{\rtf1\ansi\ansicpg1252\cocoartf1343\cocoasubrtf140
{\fonttbl\f0\fnil\fcharset0 HelveticaNeue;\f1\fswiss\fcharset0 ArialMT;}
{\colortbl;\red255\green255\blue255;\red38\green38\blue38;\red255\green255\blue255;\red62\green0\blue63;
\red26\green26\blue26;}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\sl380\sa200

\f0\b\fs32 \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 check if given sequences of moves for a robot is circular or not\
\pard\pardeftab720

\f1\b0\fs26 \cf4 \cb1 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec4 \
\pard\pardeftab720
\cf5 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec5 #include <stdio.h>\
\pard\pardeftab720
\cf5 \cb1 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \
\pard\pardeftab720
\cf5 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 #define N 0\
#define E 1\
#define S 2\
#define W 3\
\'a0\
// This function returns true if the given path is circular, else false\
int isCircular(char path[])\
\{\
\'a0 // Initialize starting point for robot as (0, 0) and starting\
\'a0 // direction as N North\
\'a0 int x = 0, y = 0;\
\'a0 int dir = N;\
\'a0\
\'a0 // Travers the path given for robot\
\'a0 for (int i=0; path[i]; i++)\
\'a0 \{\
\'a0 \'a0 \'a0 // Find current move\
\'a0 \'a0 \'a0 char move = path[i];\
\'a0\
\'a0 \'a0 \'a0 // If move is left or right, then change direction\
\'a0 \'a0 \'a0 if (move == 'R')\
\'a0 \'a0 \'a0 \'a0 dir = (dir + 1)%4;\
\'a0 \'a0 \'a0 else if (move == 'L')\
\'a0 \'a0 \'a0 \'a0 dir = (4 + dir - 1)%4;\
\'a0\
\'a0 \'a0 \'a0 // If move is Go, then change\'a0 x or y according to\
\'a0 \'a0 \'a0 // current direction\
\'a0 \'a0 \'a0 else // if (move == 'G')\
\'a0 \'a0 \'a0 \{\
\'a0 \'a0 \'a0 \'a0 \'a0if (dir == N)\
\'a0 \'a0 \'a0 \'a0 \'a0 \'a0 y++;\
\'a0 \'a0 \'a0 \'a0 \'a0else if (dir == E)\
\'a0 \'a0 \'a0 \'a0 \'a0 \'a0 x++;\
\'a0 \'a0 \'a0 \'a0 \'a0else if (dir == S)\
\'a0 \'a0 \'a0 \'a0 \'a0 \'a0 y--;\
\'a0 \'a0 \'a0 \'a0 \'a0else // dir == W\
\'a0 \'a0 \'a0 \'a0 \'a0 \'a0 x--;\
\'a0 \'a0 \'a0 \}\
\'a0 \}\
\'a0\
\'a0 \'a0// If robot comes back to (0, 0), then path is cyclic\
\'a0 return (x == 0 && y == 0);\
\}\
\'a0\
// Driver program\
int main()\
\{\
\'a0 \'a0 char path[] = "GLGLGLG";\
\'a0 \'a0 if (isCircular(path))\
\'a0 \'a0 \'a0 printf("Given sequence of moves is circular");\
\'a0 \'a0 else\
\'a0 \'a0 \'a0 printf("Given sequence of moves is NOT circular");\
\}\
}