{\rtf1\ansi\ansicpg1252\cocoartf1561\cocoasubrtf600
{\fonttbl\f0\fmodern\fcharset0 Courier;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;}
{\*\expandedcolortbl;;\cssrgb\c0\c0\c0;}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\sl280\partightenfactor0

\f0\fs24 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 \
// Given an array print all sub-arrays in the array which has sum 0\
\
#include<conio.h>\
#include<stdio.h>\
\
struct node\
\{\
	int key;\
\
	int value;\
\
	struct node *next;\
\};\
\
typedef struct node Node;\
\
\
struct hashMap\
\{\
	Node *start;\
\};\
\
typedef struct hashMap HashMap;\
\
\
\
HashMap *createHashMap()\
\{\
	HashMap *hashMap = (HashMap*)malloc( sizeof( HashMap ) );\
\
	hashMap->start = NULL;\
\
	return( hashMap );\
\}\
\
\
void put( HashMap *hashMap, int key, int value )\
\{\
	Node *newNode,*current;\
\
	int exists = 0;\
\
	if( hashMap->start != NULL )\
	\{\
		current = hashMap->start;\
\
		while( current != NULL )\
		\{\
			if( key == current->key )\
			\{\
				current->value = value;\
\
				exists = 1;\
			\}\
\
			current = current -> next;\
		\}\
	\}\
\
	if( !exists )\
	\{\
		newNode = (Node*)malloc(sizeof(Node));\
\
		newNode->key = key;\
\
		newNode->value = value;\
\
		newNode->next = NULL;\
\
		if( hashMap->start==NULL )\
		\{\
			hashMap->start = newNode;\
		\}\
		else\
		\{\
			current = hashMap->start;\
\
			while( current ->next != NULL )\
\
				current = current ->next;\
\
			current ->next = newNode;\
		\}\
	\}\
\}\
\
\
int get( HashMap *hashMap, int key )\
\{\
	Node *current;\
\
	if( hashMap->start==NULL )\
	\{\
		return 0;\
	\}\
	else\
	\{\
		current = hashMap->start;\
\
		while( current != NULL )\
		\{\
			if( key == current->key )\
\
				return current->value;\
\
			current = current->next;\
		\}\
	\}\
\
	return 0;\
\}\
\
\
\
int find( HashMap *hashMap, int key )\
\{\
	Node *current;\
\
	if( hashMap->start==NULL )\
	\{\
		return 0;\
	\}\
	else\
	\{\
		current = hashMap->start;\
\
		while( current != NULL )\
		\{\
			if( key == current->key )\
\
				return 1;\
\
			current = current->next;\
		\}\
	\}\
\
	return 0;\
\}\
\
struct pair\
\{\
	int i;\
\
	int j;\
\
	struct pair *next;\
\};\
\
typedef struct pair Pair;\
\
\
Pair *createPair( int i, int j )\
\{\
	Pair *pair = (Pair*)malloc( sizeof(Pair) );\
\
	pair->i = i;\
\
	pair->j = j;\
\
	pair->next = NULL;\
\
	return( pair );\
\}\
\
\
struct vector\
\{\
	Pair *start;\
\};\
\
typedef struct vector Vector;\
\
\
Vector *createVector()\
\{\
	Vector *vector = (Vector*)malloc( sizeof(Vector) );\
\
	vector->start = NULL;\
\
	return( vector );\
\}\
\
\
void insert( Vector *vector, Pair *pair )\
\{\
	Pair *current;\
\
	if( vector->start==NULL )\
	\{\
		vector->start = pair;\
	\}\
	else\
	\{\
		current = vector->start;\
\
		while( current->next != NULL )\
\
			current = current->next;\
\
		current ->next = pair;\
	\}\
\}\
\
\
\
void view( Vector *vector )\
\{\
	Pair *current;\
\
	if( vector->start==NULL )\
	\{\
		printf( " Empty Vector " );\
	\}\
	else\
	\{\
		current = vector->start;\
\
		while( current != NULL )\
		\{\
			printf( "\\n\\n  Subarray found from Index  %d to %d ", current->i, current->j );\
\
			current = current ->next;\
		\}\
	\}\
\
\}\
\
Vector* findSubArrays(int array[], int n)\
\{\
	int i, j, k;\
\
	// create an empty map\
\
	HashMap *map = createHashMap();\
\
	Pair *pair = NULL;\
\
	// create an empty vector of pairs to store subarray starting and ending index\
\
	Vector *vector = createVector();\
\
	// Maintains sum of elements so far\
\
	int sum = 0;\
\
	for ( i = 0; i < n; i++)\
	\{\
		// Add current element to sum\
\
		sum += array[ i ];\
\
\
		printf( "\\n      %2d -> %4d - > %4d ", i, array[i], sum );\
\
		// If sum is 0, we found a subarray starting from index 0 and ending at index i\
\
		if (sum == 0)\
		\{\
			pair = createPair( 0, i );\
\
			insert( vector, pair);\
		\}\
\
		// If sum already exists in the map there exists\
\
		// at-least one subarray ending at index i with 0 sum\
\
		if( find( map, sum ) )\
		\{\
			// map[sum] stores starting index of all subarrays\
\
			j = get( map, sum );\
\
			pair = createPair( j+1, i );\
\
			insert( vector, pair);\
		\}\
\
		// Important - no else\
\
		put( map, sum, i );\
\
	\}\
\
	// return output vector\
\
	return vector;\
\}\
\
// Driver code\
\
void main()\
\{\
	int array[] = \{ 11,21,16,13,11,21,26,25,19,11,10,-5,-3,-2,10,5,-1,-5\};\
\
	int n = sizeof(array)/sizeof(array[0]);\
\
	Vector *vector = NULL;\
\
	clrscr();\
\
	vector = findSubArrays(array, n);\
\
	view( vector );\
\
	getch();\
\}\
}