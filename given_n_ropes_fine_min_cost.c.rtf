{\rtf1\ansi\ansicpg1252\cocoartf1561\cocoasubrtf600
{\fonttbl\f0\fmodern\fcharset0 Courier;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;}
{\*\expandedcolortbl;;\cssrgb\c0\c0\c0;}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\sl280\partightenfactor0

\f0\fs24 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 #include<stdio.h>>\
//#include<conio.h>>\
\
\
// A Min Heap:  Collection of min heap nodes\
\
struct minheap\
\{\
	unsigned size;    	// Current size of min heap\
\
	unsigned capacity;   // capacity of min heap\
\
	int *harr;  		// Attay of minheap nodes\
\};\
\
typedef struct minheap MinHeap;\
\
\
// A utility function to create a min heap of given capacity\
\
MinHeap* createMinHeap(unsigned capacity)\
\{\
	MinHeap* minHeap = (MinHeap*) malloc( sizeof(MinHeap) );\
\
	minHeap->size = 0;  // current size is 0\
\
	minHeap->capacity = capacity;\
\
	minHeap->harr = (int*) malloc( sizeof(int) * capacity );\
\
	return minHeap;\
\}\
\
// A utility function to swap two min heap nodes\
void swapMinHeapNode(int* a, int* b)\
\{\
	int temp = *a;\
\
	*a = *b;\
\
	*b = temp;\
\}\
\
// The standard minHeapify function.\
\
void minHeapify( MinHeap* minHeap, int idx)\
\{\
	int smallest = idx;\
\
	int left = 2 * idx + 1;\
\
	int right = 2 * idx + 2;\
\
	if (left < minHeap->size && minHeap->harr[left] < minHeap->harr[smallest])\
\
		smallest = left;\
\
	if (right < minHeap->size && minHeap->harr[right] < minHeap->harr[smallest])\
\
		smallest = right;\
\
	if (smallest != idx)\
	\{\
			swapMinHeapNode(&minHeap->harr[smallest], &minHeap->harr[idx]);\
\
		minHeapify(minHeap, smallest);\
	\}\
\}\
\
// A utility function to check if size of heap is 1 or not\
\
int isSizeOne( MinHeap* minHeap)\
\{\
	return (minHeap->size == 1);\
\}\
\
// A standard function to extract minimum value node from heap\
\
int extractMin( MinHeap* minHeap)\
\{\
	int temp = minHeap->harr[0];\
\
	minHeap->harr[0] = minHeap->harr[minHeap->size - 1];\
\
	--minHeap->size;\
\
	minHeapify(minHeap, 0);\
\
	return temp;\
\}\
\
// A utility function to insert a new node to Min Heap\
\
void insertMinHeap( MinHeap* minHeap, int val)\
\{\
	int i = 0;\
\
	++minHeap->size;\
\
	i = minHeap->size - 1;\
\
	while (i && (val < minHeap->harr[(i - 1)/2]))\
	\{\
			minHeap->harr[i] = minHeap->harr[(i - 1)/2];\
\
		i = (i - 1)/2;\
	\}\
\
	minHeap->harr[i] = val;\
\}\
\
// A standard funvtion to build min heap\
\
void buildMinHeap( MinHeap* minHeap)\
\{\
	int n = minHeap->size - 1;\
\
	int i;\
\
	for (i = (n - 1) / 2; i >= 0; --i)\
\
		minHeapify(minHeap, i);\
\}\
\
// Creates a min heap of capacity equal to size and inserts all values\
// from len[] in it. Initially size of min heap is equal to capacity\
\
MinHeap* createAndBuildMinHeap(int len[], int size)\
\{\
	int i=0;\
\
	MinHeap* minHeap = createMinHeap(size);\
\
	for (i = 0; i < size; ++i)\
\
		minHeap->harr[i] = len[i];\
\
	minHeap->size = size;\
\
	buildMinHeap(minHeap);\
\
	return minHeap;\
\}\
\
// The main function that returns the minimum cost to connect n ropes of\
// lengths stored in len[0..n-1]\
int minCost(int len[], int n)\
\{\
	int cost = 0;  // Initialize result\
\
	// Create a min heap of capacity equal to n and put all ropes in it\
\
	MinHeap* minHeap = createAndBuildMinHeap(len, n);\
\
	// Iterate while size of heap doesn't become 1\
\
	while (!isSizeOne(minHeap))\
	\{\
			// Extract two minimum length ropes from min heap\
\
		int min     = extractMin(minHeap);\
\
		int sec_min = extractMin(minHeap);\
\
			cost += (min + sec_min);  // Update total cost\
\
			// Insert a new rope in min heap with length equal to sum of two extracted minimum lengths\
\
		insertMinHeap(minHeap, min+sec_min);\
	\}\
\
	// Finally return total minimum cost for connecting all ropes\
\
	return cost;\
\}\
\
// Driver program to test above functions\
void main()\
\{\
	int len[] = \{10,15,13,22,11\};\
\
	int size = sizeof(len)/sizeof(len[0]);\
\
//	clrscr();\
\
	printf( "Total cost for connecting ropes : %d ", minCost(len, size) );\
\
//	getch();\
\}\
}