{\rtf1\ansi\ansicpg1252\cocoartf1561\cocoasubrtf600
{\fonttbl\f0\fmodern\fcharset0 Courier;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;}
{\*\expandedcolortbl;;\cssrgb\c0\c0\c0;}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\sl280\partightenfactor0

\f0\fs24 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 #include<stdio.h>\
//#include<conio.h>\
#include<limits.h>\
\
#define N 4\
\
// A min heap node\
\
struct MinHeapNode\
\{\
	int element; 	// The element to be stored\
\
	int i; 		// index of the array from which the element is taken\
\
	int j; 		// index of the next element to be picked from array\
\};\
\
\
\
struct Node\
\{\
	int element; // The element to be stored\
\
	int i; // index of the row from which the element is taken\
\
	int j; // index of the next element to be picked from row\
\};\
\
typedef struct Node MinHeapNode;\
\
\
\
struct Heap\
\{\
	MinHeapNode *harr; // pointer to array of elements in heap\
\
	int heap_size; // size of min heap\
\};\
\
typedef struct Heap MinHeap;\
\
\
\
\
// To get index of left child of node at index i\
\
int left(int i)\
\{\
	return (2*i + 1);\
\}\
\
// To get index of right child of node at index i\
\
int right(int i)\
\{\
	return (2*i + 2);\
\}\
\
\
// A utility function to swap two elements\
void swap(MinHeapNode *x, MinHeapNode *y)\
\{\
	MinHeapNode temp = *x;\
\
	*x = *y;\
\
	*y = temp;\
\}\
\
\
\
// A recursive method to heapify a subtree with root at given index\
\
// This method assumes that the subtrees are already heapified\
\
void MinHeapify( MinHeap *hp, int i)\
\{\
	int l = left(i);\
\
	int r = right(i);\
\
	int smallest = i;\
\
	if (l < hp->heap_size && hp->harr[l].element < hp->harr[i].element)\
\
		smallest = l;\
\
	if (r < hp->heap_size && hp->harr[r].element < hp->harr[smallest].element)\
\
		smallest = r;\
\
	if (smallest != i)\
	\{\
		swap(&hp->harr[i], &hp->harr[smallest]);\
\
\
		MinHeapify( hp, smallest );\
	\}\
\}\
\
\
// To replace root with new node x and heapify() new root\
\
void replaceMin(MinHeap *hp, MinHeapNode x)\
\{\
	hp->harr[0] = x;\
\
	MinHeapify(hp, 0);\
\}\
\
// This function takes an array of arrays as an argument and\
// All arrays are assumed to be sorted. It merges them together\
// and prints the final sorted output.\
int *mergeKArrays(int mat[][N], int k)\
\{\
	int i, count;\
\
	MinHeap *hp = NULL;\
\
	int *output = (int*)malloc( sizeof( int ) * ( N*k) );  // To store output array\
\
	// Create a min heap with k heap nodes.  Every heap node has first element of an array\
\
\
	MinHeapNode *harr = (MinHeapNode*)malloc( sizeof( MinHeapNode ) * k );\
\
\
	for ( i = 0; i < k; i++)\
	\{\
			harr[i].element = mat[i][0]; // Store the first element\
\
		harr[i].i = i;  // index of array\
\
		harr[i].j = 1;  // Index of next element to be stored from array\
	\}\
\
	hp =  (MinHeap*) malloc( sizeof(MinHeap) ); // Create the min heap\
\
\
	hp->heap_size = k;\
\
	hp->harr = harr;  // store address of array\
\
	i = (hp->heap_size - 1)/2;\
\
	while (i >= 0)\
	\{\
		MinHeapify( hp, i);\
\
		i--;\
	\}\
\
\
\
	// Now one by one get the minimum element from min\
	// heap and replace it with next element of its array\
\
\
	for (count = 0; count < N*k; count++)\
	\{\
		// Get the minimum element and store it in output\
\
		MinHeapNode root = hp->harr[0];\
\
		  output[count] = root.element;\
\
		// Find the next elelement that will replace current\
\
		// root of heap. The next element belongs to same\
\
		// array as the current root.\
\
		if (root.j < N)\
		\{\
			root.element = mat[root.i][root.j];\
\
			root.j += 1;\
		\}\
\
		// If root was the last element of its array\
\
		else root.element =  INT_MAX; //INT_MAX is for infinite\
\
		// Replace root with next element of array\
\
		replaceMin(hp, root);\
	\}\
\
	return output;\
\}\
\
// A utility function to print array elements\
\
void printArray(int arr[], int size)\
\{\
	int i;\
\
	for (i=0; i < size; i++)\
\
		printf( " %d", arr[i] );;\
\}\
\
// Driver program to test above functions\
\
void main()\
\{\
	// Change n at the top to change number of elements in an array\
\
	 int arr[][N] =  \{	\{10,15,21,25\},\
\
				\{1,5,12,51\},\
\
				\{3,11,16,19\},\
				\{21,22,23,54\}\
		\};\
    \
	int k = sizeof(arr)/sizeof(arr[0]);\
 \
    	int *output = mergeKArrays(arr, k);\
\
	//clrscr();\
 \
    	printf( "Merged array :  " );\
    \
	printArray(output, N*k);\
 \
    //	getch();\
\}\
}