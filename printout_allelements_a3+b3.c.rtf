{\rtf1\ansi\ansicpg1252\cocoartf1561\cocoasubrtf600
{\fonttbl\f0\fmodern\fcharset0 Courier;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;}
{\*\expandedcolortbl;;\cssrgb\c0\c0\c0;}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\sl280\partightenfactor0

\f0\fs24 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 #include<stdio.h>\
//#include<conio.h>\
#include<limits.h>\
\
\
	// A Min heap node\
\
struct Node\
\{\
	int element; // The element to be stored\
\
	int i; // index of the row from which the element is taken\
\
	int j; // index of the next element to be picked from row\
\};\
\
typedef struct Node MinHeapNode;\
\
\
\
struct Heap\
\{\
	MinHeapNode *harr; // pointer to array of elements in heap\
\
	int heap_size; // size of min heap\
\};\
\
typedef struct Heap MinHeap;\
\
// To get index of left child of node at index i\
\
int left( int  i )\
\{\
	return ( 2 * i + 1 );\
\}\
\
// To get index of right child of node at index i\
\
int right(int i)\
\{\
	return ( 2 * i + 2 );\
\}\
\
\
// A utility function to swap two elements\
void swap(MinHeapNode *x, MinHeapNode *y)\
\{\
    MinHeapNode temp = *x;\
\
	*x = *y;\
\
	*y = temp;\
\}\
\
\
// A recursive method to heapify a subtree with root at given index\
\
// This method assumes that the subtrees are already heapified\
\
void MinHeapify( MinHeap *hp, int i)\
\{\
	int l = left(i);\
\
	int r = right(i);\
\
	int smallest = i;\
\
	if (l < hp->heap_size && hp->harr[l].element < hp->harr[i].element)\
\
		smallest = l;\
\
	if (r < hp->heap_size && hp->harr[r].element < hp->harr[smallest].element)\
\
		smallest = r;\
\
	if (smallest != i)\
	\{\
		swap(&hp->harr[i], &hp->harr[smallest]);\
\
\
		MinHeapify( hp, smallest );\
	\}\
\}\
\
\
// To replace root with new node x and heapify() new root\
\
void replaceMin(MinHeap *hp, MinHeapNode x)\
\{\
	hp->harr[0] = x;\
\
	MinHeapify(hp, 0);\
\}\
\
\
// This function prints elements of a given matrix in non-decreasing\
\
//  order. It assumes that ma[][] is sorted row wise sorted.\
\
void printSorted( int n )\
\{\
	int i, j,  count;\
\
	// Create a min heap with k heap nodes.  Every heap node has first element of an array\
\
\
	MinHeap *hp =  (MinHeap*) malloc( sizeof(MinHeap) ); 	// Create the min heap\
\
	MinHeapNode *harr = (MinHeapNode*)malloc( sizeof( MinHeapNode ) * ( n + 1 ) );\
\
	for ( i = 0; i <= n ; i++)\
	\{\
		harr[i].element = i * i * i; 		// Store the first element\
\
		harr[i].i = i;  	// index of row\
\
		harr[i].j = 1;  	// Index of next element to be stored from row\
	\}\
\
\
	hp->heap_size = (n+1);\
\
	hp->harr = harr;  // store address of array\
\
	i = (hp->heap_size - 1)/2;\
\
	while (i >= 0)\
	\{\
		MinHeapify( hp, i);\
\
		i--;\
	\}\
\
\
	// Now one by one get the minimum element from min heap and replace it with next element of its array\
\
	for (count = 0; count < ( n + 1 ) * ( n + 1 ) ; count++)\
	\{\
		// Get the minimum element and store it in output\
\
		MinHeapNode root = hp->harr[0];\
\
		printf( " %d ", root.element );\
\
		// Find the next elelement that will replace current root of heap.\
\
		// The next element belongs to same array as the current root.\
\
		if (root.j <= n )\
		\{\
			i = root.i;\
\
			j = root.j;\
\
			root.element = i * i * i + j * j * j;\
\
			root.j += 1;\
		\}\
\
		// If root was the last element of its array\
\
		else\
\
			root.element =  INT_MAX; 	//INT_MAX is for infinite\
\
		// Replace root with next element of array\
\
		replaceMin(hp, root);\
	\}\
\}\
\
void main()\
\{\
	int n, i, j, c1, c2;\
\
//	clrscr();\
\
	printf( "\\n\\n  Eneter n value : " );\
\
	scanf( "%d", &n );\
\
\
	printf( "\\n\\n      " );\
\
	for( i=0; i<=n; i++ )\
\
		printf( " %4d", i );\
\
\
	printf( "\\n      " );\
\
	for( i=0; i<=n; i++ )\
\
		printf( "  ---", i );\
\
\
	for( i=0; i<=n; i++ )\
	\{\
		printf( "\\n\\n %2d | ", i );\
\
		for( j = 0; j<=n ; j++ )\
		\{\
			c1 = i * i * i;\
\
			c2 = j * j * j;\
\
			printf( " %4d", c1 + c2 );\
\
		\}\
	\}\
\
	printf( "\\n\\n  After sorting : " );\
\
	printSorted( n );\
\
//	getch();\
\}\
}