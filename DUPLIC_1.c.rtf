{\rtf1\ansi\ansicpg1252\cocoartf1561\cocoasubrtf600
{\fonttbl\f0\fmodern\fcharset0 Courier;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;}
{\*\expandedcolortbl;;\cssrgb\c0\c0\c0;}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\sl280\partightenfactor0

\f0\fs24 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 \
 // Check whether given array contains duplicates in k-distance or not\
\
#include<conio.h>\
\
#include<stdio.h>\
\
\
struct node\
\{\
	int element;\
\
	struct node *next;\
\};\
\
typedef struct node Node;\
\
\
struct set\
\{\
	Node *start;\
\};\
\
typedef struct set Set;\
\
\
\
Set *createSet()\
\{\
	Set *set = (Set*)malloc( sizeof(Set) );\
\
	set->start = NULL;\
\
	return( set );\
\}\
\
\
void adding( Set *set, int element )\
\{\
	Node *newNode,*current;\
	\
	newNode = (Node*)malloc(sizeof(Node));\
\
	newNode->element = element;\
\
	newNode->next = NULL;\
\
	if( set->start==NULL )\
	\{\
		set->start = newNode;\
	\}\
	else\
	\{\
		current = set->start;\
\
		while( current ->next != NULL )\
\
		current = current ->next;\
\
		current ->next = newNode;\
	\}\
\}\
\
\
void removing( Set *set, int element )\
\{\
	Node *current,*previous;\
\
	if( set->start != NULL )\
	\{\
\
		if( element == set->start->element )\
		\{\
			current = set->start;\
\
			set->start = set->start->next;\
\
			free( current );\
		\}\
		else\
		\{\
			current = set->start;\
\
			while( element != current->element  && current->next != NULL )\
			\{\
				previous=current;\
\
				current = current->next;\
			\}\
\
			if( element == current->element )\
			\{\
				previous->next = current->next;\
\
				free( current );\
			\}\
		\}\
	\}\
\}\
\
\
int find( Set *set, int element )\
\{\
	Node *current;\
\
	if( set->start==NULL )\
	\{\
		return 0;\
	\}\
	else\
	\{\
		current = set->start;\
\
		while( current != NULL )\
		\{\
			if( element == current->element )\
\
				return 1;\
\
			current = current->next;\
		\}\
	\}\
\
	return 0;\
\}\
\
\
/* Check if a given array contains duplicate elements within k distance from each other */\
\
int checkDuplicatesWithinK(int array[], int n, int k)\
\{\
	int i;\
\
	// Creates an empty hashset\
\
	Set *set = createSet();\
\
	// Traverse the input array\
\
	for ( i = 0; i < n; i++)\
	\{\
			// If already present n hash, then we found a duplicate within k distance\
\
		if ( find( set, array[i] ) )\
\
			return 1;\
\
		// Add this item to hashset\
\
		adding(set, array[i]);\
\
		// Remove the k+1 distant item\
\
		if ( i >= k )\
\
			removing( set, array[i-k] );\
	\}\
\
	return 0;\
\}\
\
\
// Driver method to test above method\
\
void main ()\
\{\
\
	int array[] = \{ 10, 5, 3, 4, 3, 5, 6 \};\
\
	int n = sizeof(array) / sizeof(array[0]);\
\
	int k = 3;\
\
	clrscr();\
\
	printf( " \\n\\n\\n\\n Array contains duplicate elements \\n\\n  within %d distance from each other : ", k );\
\
	if( checkDuplicatesWithinK( array , n, k ) )\
\
	 printf( " Yes " );\
\
	else\
\
		printf( " No " );\
\
	k = 1;\
\
	printf( " \\n\\n\\n\\n  Array contains duplicate elements \\n\\n  within %d distance from each other : ", k );\
\
	if( checkDuplicatesWithinK( array , n, k ) )\
\
		printf( " Yes " );\
\
	else\
\
		printf( " No " );\
\
	getch();\
\}\
}