{\rtf1\ansi\ansicpg1252\cocoartf1561\cocoasubrtf600
{\fonttbl\f0\fmodern\fcharset0 Courier;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;}
{\*\expandedcolortbl;;\cssrgb\c0\c0\c0;}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\sl280\partightenfactor0

\f0\fs24 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2  // Check whether given two sets are disjoint or not\
\
#include<conio.h>\
\
#include<stdio.h>\
\
\
struct node\
\{\
	int element;\
\
	struct node *next;\
\};\
\
typedef struct node Node;\
\
\
struct set\
\{\
	Node *start;\
\};\
\
typedef struct set Set;\
\
\
\
Set *createSet()\
\{\
	Set *set = (Set*)malloc( sizeof(Set) );\
\
	set->start = NULL;\
\
	return( set );\
\}\
\
\
void adding( Set *set, int element )\
\{\
	Node *newNode,*current;\
	\
	newNode = (Node*)malloc(sizeof(Node));\
\
	newNode->element = element;\
\
	newNode->next = NULL;\
\
	if( set->start==NULL )\
	\{\
		set->start = newNode;\
	\}\
	else\
	\{\
		current = set->start;\
\
		while( current ->next != NULL )\
\
		current = current ->next;\
\
		current ->next = newNode;\
	\}\
\}\
\
int find( Set *set, int element )\
\{\
	Node *current;\
\
	if( set->start==NULL )\
	\{\
		return 0;\
	\}\
	else\
	\{\
		current = set->start;\
\
		while( current != NULL )\
		\{\
			if( element == current->element )\
\
				return 1;\
\
			current = current->next;\
		\}\
	\}\
\
	return 0;\
\}\
\
int areDisjoint( int set1[], int set2[], int n1, int n2)\
\{\
	int i;\
\
    	// Creates an empty hashset\
    \
	Set *set = createSet();\
 \
    	// Traverse the first set and store its elements in hash\
    \
	for ( i = 0; i < n1; i++)\
        \
		adding( set, set1[i] );\
 \
    	// Traverse the second set and check if any element of it is already in hash or not.\
    \
	for ( i = 0; i < n2; i++)\
\
		if ( find( set, set2[i] ) )\
\
			return 0;\
\
	return 1;\
\}\
\
// Driver method to test above method\
\
void main()\
\{\
	int set1[] = \{10, 5, 3, 4, 6\};\
\
	int set2[] = \{ 8, 7, 9, 3 \};\
\
	int set3[] = \{ 8, 7, 9, 2 \};\
\
	int n1 = sizeof(set1) / sizeof(set1[0]);\
\
	int n2 = sizeof(set2) / sizeof(set2[0]);\
\
	int n3 = sizeof(set3) / sizeof(set3[0]);\
\
	clrscr();\
\
\
	printf( "\\n\\n Two sets are disjoint : " );\
\
	if (areDisjoint(set1, set2, n1, n2))\
\
		printf( " Yes " );\
	else\
\
		printf( " No" );\
\
\
	printf( "\\n\\n Two sets are disjoint : " );\
\
	if (areDisjoint(set1, set3, n1, n3))\
\
		printf( " Yes " );\
	else\
\
		printf( " No" );\
\
\
	getch();\
\}\
}